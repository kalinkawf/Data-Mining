rattle
library(rattle)
rattle()
rattle
rattle
# Załaduj bibliotekę MASS
library(MASS)
# Wczytaj zbiór danych Cars93
data(Cars93)
# Wyświetl pierwsze kilka wierszy zbioru danych, aby zobaczyć jego strukturę
head(Cars93)
# Uzyskaj bezpośredni dostęp do zmiennych w zbiorze danych
# Sprawdź informacje zawarte w wybranych kolumnach
summary(Cars93[c("Min.Price", "MPG.city", "MPG.highway", "Weight", "Origin", "Type")])
# Utwórz nowe zmienne opisujące zużycie paliwa w litrach na 100 km w mieście i na autostradzie
Cars93$Fuel.city <- (1 / Cars93$MPG.city) * 3.8 * 1.6
Cars93$Fuel.highway <- (1 / Cars93$MPG.highway) * 3.8 * 1.6
# Utwórz nową zmienną opisującą wagę samochodu w kg
Cars93$Weight.kg <- Cars93$Weight * 0.4536
# Utwórz nową zmienną opisującą cenę wersji podstawowej modelu samochodu w tys. PLN
Cars93$Price.PLN <- Cars93$Price * 3.35 / 1000
# Wyświetl nowe zmienne oraz ich wartości dla pierwszych kilku wierszy
head(Cars93[c("Fuel.city", "Fuel.highway", "Weight.kg", "Price.PLN")])
# Wyświetl pierwsze kilka wierszy zbioru danych, aby zobaczyć jego strukturę
head(Cars93)
View(Cars93)
View(Cars93)
# Utwórz nową zmienną opisującą cenę wersji podstawowej modelu samochodu w tys. PLN
Cars93$Price.PLN <- Cars93$Price * 3.35
# Utwórz nową zmienną opisującą wagę samochodu w kg
Cars93$Weight.kg <- Cars93$Weight * 0.4536
# Utwórz nową zmienną opisującą cenę wersji podstawowej modelu samochodu w tys. PLN
Cars93$Price.PLN <- Cars93$Price * 3.35
Cars93
library(MASS)
library(MASS)
data(Cars93)
# Wczytaj zbiór danych Cars93
data(Cars93)
# Wczytaj zbiór danych Cars93
data(Cars93)
# Wyświetl pierwsze kilka wierszy zbioru danych, aby zobaczyć jego strukturę
head(Cars93)
View(Cars93)
# Załaduj bibliotekę MASS
library(MASS)
# Wczytaj zbiór danych Cars93
data(Cars93)
# Wyświetl pierwsze kilka wierszy zbioru danych, aby zobaczyć jego strukturę
head(Cars93)
# Uzyskaj bezpośredni dostęp do zmiennych w zbiorze danych
# Sprawdź informacje zawarte w wybranych kolumnach
summary(Cars93[c("Min.Price", "MPG.city", "MPG.highway", "Weight", "Origin", "Type")])
# Utwórz nowe zmienne opisujące zużycie paliwa w litrach na 100 km w mieście i na autostradzie
Cars93$Fuel.city <- (1 / Cars93$MPG.city) * 3.8 * 1.6
Cars93$Fuel.highway <- (1 / Cars93$MPG.highway) * 3.8 * 1.6
# Utwórz nową zmienną opisującą wagę samochodu w kg
Cars93$Weight.kg <- Cars93$Weight * 0.4536
# Utwórz nową zmienną opisującą cenę wersji podstawowej modelu samochodu w tys. PLN
Cars93$Price.PLN <- Cars93$Price * 3.35
# Wyświetl nowe zmienne oraz ich wartości dla pierwszych kilku wierszy
head(Cars93[c("Fuel.city", "Fuel.highway", "Weight.kg", "Price.PLN")])
getwd()
setwd("C:/studia/Data Mining/proj1")
getwd()
# Dopasowanie liniowego modelu regresji
model <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data)
data <- read.csv("realest.txt", header = TRUE)
View(data)
View(data)
source("C:/studia/Data Mining/proj1/zad4.R")
data <- read.csv("realest.txt", header = TRUE, sep=" ")
data <- read.csv("realest.txt", header = TRUE, sep=" ")
source("C:/studia/Data Mining/proj1/zad4.R")
data <- read.table("realest.txt", header = TRUE)
head(data)
View(data)
source("C:/studia/Data Mining/proj1/zad4.R")
# Dopasowanie liniowego modelu regresji
model <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data)
# Wypisanie podsumowania modelu
summary(model)
source("C:/studia/Data Mining/proj1/zad4.R")
View(data)
View(data)
source("C:/studia/Data Mining/proj1/zad4.R")
abline(model)
source("C:/studia/Data Mining/proj1/zad4.R")
head(data)
model <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data)
summary(model)
abline(model)
source("C:/studia/Data Mining/proj1/zad4.R")
# a) Stworzenie kopii danych
data_alternative <- data
data_alternative$Bedroom <- data_alternative$Bedroom + 1
model_alternative <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data_alternative)
summary(model_alternative)
View(data_alternative)
# a) Stworzenie kopii danych
data_alternative <- data
data_alternative$Bedroom <- data_alternative$Bedroom + 1
model_alternative <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data_alternative)
summary(model_alternative)
data <- read.table("realest.txt", header = TRUE)
head(data)
model <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data)
summary(model)
source("C:/studia/Data Mining/proj1/zad4.R")
model_bedroom_plus_1 <- lm(Price ~ bedroom, data = data_alternative)
View(data_alternative)
model <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data)
summary(model)
# a) Stworzenie kopii danych
data_alternative <- data
data_alternative$Bedroom <- data_alternative$Bedroom + 1
model_alternative <- lm(Price ~ Bedroom + Space + Room + Lot + Tax + Bathroom + Garage + Condition, data = data_alternative)
summary(model_alternative)
model_bedroom_plus_1 <- lm(Price ~ Bedroom, data = data_alternative)
summary(model_bedroom_plus_1)
# b) szacune cene
my_house <- data.frame(
Bedroom_plus_1 = 3 + 1,  # liczba sypialni + 1
Space = 1500,            # powierzchnia w stopach kwadratowych
Room = 8,                # liczba pokoi
Lot = 40,                # szerokość działki w stopach
Tax = 1000,              # roczny podatek od nieruchomości
Bathroom = 5,            # liczba łazienek
Garage = 1               # liczba miejsc parkingowych w garażu
)
expected_price <- predict(model, my_house, interval = "confidence", level=0.95)
# b) szacune cene
my_house <- data.frame(
Bedroom = 3,  # liczba sypialni + 1
Space = 1500,            # powierzchnia w stopach kwadratowych
Room = 8,                # liczba pokoi
Lot = 40,                # szerokość działki w stopach
Tax = 1000,              # roczny podatek od nieruchomości
Bathroom = 5,            # liczba łazienek
Garage = 1               # liczba miejsc parkingowych w garażu
)
expected_price <- predict(model, my_house, interval = "confidence", level=0.95)
# b) szacune cene
my_house <- data.frame(
Bedroom = 3,  # liczba sypialni + 1
Space = 1500,            # powierzchnia w stopach kwadratowych
Room = 8,                # liczba pokoi
Lot = 40,                # szerokość działki w stopach
Tax = 1000,              # roczny podatek od nieruchomości
Bathroom = 5,            # liczba łazienek
Garage = 1               # liczba miejsc parkingowych w garażu
)
expected_price <- predict(model, new_data = my_house, interval = "confidence", level=0.95)
print(expected_price)
expected price
expected_price
View(model)
# b) szacune cene
my_house <- data.frame(
Bedroom = 3,  # liczba sypialni + 1
Space = 1500,            # powierzchnia w stopach kwadratowych
Room = 8,                # liczba pokoi
Lot = 40,                # szerokość działki w stopach
Tax = 1000,              # roczny podatek od nieruchomości
Bathroom = 5,            # liczba łazienek
Garage = 1               # liczba miejsc parkingowych w garażu
)
View(my_house)
expected_price <- predict(model, new_data = my_house, interval = "confidence", level=0.95)
expected_price <- predict(model, my_house, interval = "confidence", level=0.95)
expected_price
View(data)
